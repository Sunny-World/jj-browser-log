import { logOptions } from './util/interface';
declare const jjLoger: {
    options: any;
    output: string;
    depth: number;
    parentSizes: string;
    currentResult: string;
    startTime: string;
    isLoad: boolean;
    isLines: boolean;
    init(options?: logOptions): void;
    getLog(): any;
    tail(numLines?: number): any;
    search(str: string): string;
    getSlice(lineNumber: number, numLines: number): any;
    downLog(fileName?: any): void;
    clear(): void;
    save(obj: any): string;
    log(obj: any): void;
    warn(obj: any): void;
    error(obj: any): void;
    determineType(object: any): any;
    formatType(type: any, obj: any): any;
    formatSessionDuration(startTime: any, endTime: any): any;
    trimLog(log: any, maxLines: number): any;
    lines(): any;
    formatTimestamp(timestamp: any): string;
    objectSize(obj: any): number;
    indentsForDepth(depth: any): any;
    performanceTest(): void;
};
export default jjLoger;
export declare const jjLog: {
    options: any;
    output: string;
    depth: number;
    parentSizes: string;
    currentResult: string;
    startTime: string;
    isLoad: boolean;
    isLines: boolean;
    init(options?: logOptions): void;
    getLog(): any;
    tail(numLines?: number): any;
    search(str: string): string;
    getSlice(lineNumber: number, numLines: number): any;
    downLog(fileName?: any): void;
    clear(): void;
    save(obj: any): string;
    log(obj: any): void;
    warn(obj: any): void;
    error(obj: any): void;
    determineType(object: any): any;
    formatType(type: any, obj: any): any;
    formatSessionDuration(startTime: any, endTime: any): any;
    trimLog(log: any, maxLines: number): any;
    lines(): any;
    formatTimestamp(timestamp: any): string;
    objectSize(obj: any): number;
    indentsForDepth(depth: any): any;
    performanceTest(): void;
};
